Starting date & time- 02-Jun-2025 16:09 hours.

I. Introduction to Django- Part 1:

1. What is DJango?
- Django is a python-based web framework.
- It is open-source.

2. What is a Framework?
- Framework is a pre-built architecture.
- In terms of Web Framework, the project comes with a pre-built architecture: like a detailed and well-structured project architecture, specific directories for specific operations or functionalities.
- Comes with its own pre-built functionalities like: user authentication, data encryption, routing, etc.

3. What are Libraries?
- Libraries are pre-written code.
- Used to perform specific operations or to assist in performing the specified function.

4. DJango data encryption method:
- Django uses PBKDF2 (Password-Based Key Derivation Function 2) for password hashing.
- It is a key stretching algorithm that applies a hash function to the password along with a salt.

5. Whay use DJango?
- Django comes with a built-in admin interface, which makes it easy to manage application data.
- It has a robust ORM (Object-Relational Mapping) system that allows developers to interact with databases using Python code instead of SQL.
- Django has a strong community and extensive documentation, making it easier for developers to find help and resources.
- It follows the "Don't Repeat Yourself" (DRY) principle, promoting reusability of code and reducing redundancy.
- Django uses DRY (Don't Repeat Yourself) principle, which means it encourages the reuse of code and reduces redundancy.
- Highly scalable and can handle high traffic loads efficiently.
- Used by- Instagram, Pinterest, Spotify, and many other popular websites.

II. Introduction to Django- Part 2:

6. Current version of DJango:
- The LTS (Long Term Support) version of Django is 5.2.3.

7. What is Virtual Environment?
- A virtual environment is an isolated environment in which you can install packages and dependencies without affecting the global Python installation.
- It allows you to create a separate environment for each project, ensuring that dependencies do not conflict with each other.

8. Global vs Virtual Environment scope:
- Global scope refers to the system-wide Python installation where packages are installed globally and can be accessed by any project.
- Virtual environment scope is limited to the specific project, allowing you to manage dependencies independently without affecting other projects or the global Python installation.

9. What is pip?
- Pip is a package manager for Python that allows you to install and manage Python packages and libraries.
- It is used to install packages from the Python Package Index (PyPI) and other repositories.

10. What is pip freeze?
- Pip freeze is a command that generates a list of all installed Python packages in the current environment along with their versions.
- It outputs the list in a format that can be used to recreate the environment later, typically saved in a requirements.txt file.

11. Installing Virtual Environment on Ubuntu:
- To install the virtual environment package, use the command:

  sudo apt install python3-venv
- This command installs the `venv` module, which is used to create virtual environments in Python 3.

12. Creating a Virtual Environment:
- To create a virtual environment, navigate to your project directory and run the command: 

  python3 -m venv <env_name>

- Replace `<env_name>` with the desired name for your virtual environment.

- Explanation of the command:
  - `python3` specifies the Python version to use.
  - `-m` flag tells Python to run module.
  - `venv` indicates that you want to run the `venv` module to create a virtual environment.
  - `<env_name>` is the placeholder for the name you want to give your virtual environment.

13. Activating a Virtual Environment:
- To activate the virtual environment, use the command:

  source <env_name>/bin/activate

- After activation, your terminal prompt will change to indicate that you are now working within the virtual environment.

14. Deactivating a Virtual Environment:
- To deactivate the virtual environment and return to the global Python environment, simply run the command:

  deactivate

- This will restore your terminal prompt to its original state, indicating that you are no longer in the virtual environment.

15. Installing Django in a Virtual Environment:
- After activating the virtual environment, you can install Django using pip.
- Upgrade pip to the latest version first by running(Optional but recommended):

  pip install --upgrade pip

- To install Django within the activated virtual environment, use the command:

  pip install django

- This command will install the latest version of Django available on PyPI (Python Package Index) within the virtual environment.

- To verify the installation, you can check the installed Django version by running:

  python -m django --version

  OR 

  django-admin --version
  
  OR 

  pip freeze | grep Django

- This will display the version of Django that has been installed in your virtual environment.

III. DJango Project Setup and Introduction to DJango Project Structure:

16. Creating a Django Project:
- To create a new Django project, use the command:

  django-admin startproject <project_name>

- Replace `<project_name>` with the desired name for your project.
- This command will create a new directory with the specified project name, containing the necessary files and directories for a Django project.

17. Running the Django Development Server:
- To run the Django development server, navigate to the project directory and use the command:

  python manage.py runserver

- This command starts the development server, allowing you to access your Django application in a web browser at `http://127.0.0.1:8000/'.

- You can specify a different port by appending `:<port_number>` to the command, for example:

  python manage.py runserver 8080

- This will run the server on port 8080 instead of the default port 8000.

18. Project Directory Structure:
- After creating a Django project, the directory structure will look like this:

your_directory_to_use_venv_&_django/
<env_name>
<project_name>/
        __init__.py
        settings.py
        urls.py
        asgi.py
        wsgi.py
manage.py

- The `__init__.py` file indicates that the directory is a Python package. 
- It tells the python interpreter that it is not a normal directory but a python package.
- It helps in importing modules from the package.

- The `settings.py` file contains the configuration settings for the Django project.
- It includes settings for database connections, static files, templates, middleware, and other project-specific configurations.

- The `urls.py` file defines the URL routing for the project.
- It maps URLs to views, allowing you to define how different URLs should be handled by your application.

- The `asgi.py` and `wsgi.py` files are entry points for ASGI and WSGI servers, respectively.
- The `asgi.py` file is used for deploying the Django application on an ASGI-compatible web server.
- It stands for Asynchronous Server Gateway Interface.

- The `wsgi.py` file is used for deploying the Django application on a WSGI-compatible web server.
- It stand for Web Server Gateway Interface.

- The `manage.py` file is a command-line utility that allows you to interact with your Django project, such as running the development server, creating applications, and managing the database.

IV. 'settings.py' in-depth:

19. The setting.py file:
- BASE_DIR: Point to the root directory of your Djnago project.
- SECRET_KET: A cryptograpich strong random string used by Django for various security-related operations.
- DEBUG = True: Used to check errors during development.
- ALLOWED_HOST = []: You can specify the domain name of your server, where you want to run your project.
- INSTALLED_APPS: Defines which applications are enabled and available for your Django project.
- MIDDLEWARE: Consist of middlewares that performs operations like authentication, security, etc.
- ROOT_URLCONF: Instructs the python interpreter to use URLs from the urls.py file in the project directory.
- TEMPLATES: Used for rendering the front-end part of the project.
- DATABASE: Used to set the database to be used by the project.
- AUTH_PASSWORD_VALIDATORS: Built-in password validators.

V. How Django works?

20. Which software design pattern is used by Django?
- Django used MVT model.
- M: Model: Responsible for all database related operations.
  V: View: Acts as the bridge between the models and the templates. Views receives a request, and returns a response.
  T: Template: Display users that data, basically what the users see- the 'UI'.

21. How MVT works?
- User makes a request.
- URL routing: Django checks for the matching requested URL pattern, and than select which view function to call.
- View: Contains all the business logics, and tell the model what operation(s) to perform with the data.
- Model: Perform the operation on the data in the database as per the user's request and send back the information to the view.
- Template: Template combines the processed data received by view, sent by the model with the html markup.
- HTTP Response: The rendered HTML is sent back to the user as an HTTP response, and the final results are displayed to the user according the user's request.

VI. How to create views and templates in Django?

22. Creating a View:
- Create a new file named `views.py` in your Django application directory.
- Define a view function that takes a request object as an argument and returns an HTTP response.

- For example, in `views.py`:

from django.http import HttpResponse
def my_view(request):
    return HttpResponse("Hello, this is my view!")
  
- This view function returns a simple HTTP response with the text "Hello, this is my view!".

23. Mapping URLs to Views:
- In your Django application, go to the `urls.py` file.
- Import the view function you created in `views.py`.
- Add a URL pattern that maps a specific URL to your view function.

- For example, in `urls.py`:  

from django.urls import path
from .views import my_view

urlpatterns = [
    path('my-view/', my_view, name='my_view'),
]

- This URL pattern maps the URL `/my-view/` to the `my_view` function.

24. Creating a Template:
- Create a new directory named `templates` in your Django application directory.
- Inside the `templates` directory, create an HTML file for your template, for example, `my_template.html`.
- In `my_template.html`, you can write your HTML code, for example:

<!DOCTYPE html>
<html>
<head>
    <title>My Template</title>
</head>
<body>
    <h1>Hello, this is my template!</h1>
</body>
</html>

25. Rendering a Template in a View:
- In your view function, you can render the template using Django's `render` function.

from django.shortcuts import render
def my_view(request):
    return render(request, 'my_template.html')
    
- This will render the `my_template.html` file and return it as an HTTP response.

VII. How to create and use static files in Django?

26. Creating a Static Directory:
- In your Django application directory, create a new directory named `static`.
- Inside the `static` directory, you can create subdirectories for different types of static files, such as `css`, `js`, and `images`.
- For example, you can create the following structure:  
your_app/
    static/
        css/
            styles.css
        js/
            scripts.js
        images/
            logo.png

27. Configuring Static Files in settings.py:
- Open your `settings.py` file and add the following configuration:

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR /'static'
STATICFILES_DIRS = [
    '<project_name>/static'
]

- This configuration tells Django where to find static files and how to serve them.

28. Using Static Files in Templates:
- In your HTML templates, you can use the `{% static %}` template tag to reference static files.
- First, make sure to load the staticfiles template tag library at the top of your template:

{% load static %}
- Then, you can use the `{% static %}` tag to link to your static files. For example:

<link rel="stylesheet" type="text/css" href="{% static 'css/styles.css' %}">
<script src="{% static 'js/scripts.js' %}"></script>
<img src="{% static 'images/logo.png' %}" alt="Logo">

- This will generate the correct URL for your static files based on the configuration in `settings.py`.

VIII. What are Apps in Django and how to create them?

29. What is an App in Django?
- An app in Django is a self-contained module that encapsulates a specific functionality or feature of your project.
- Each app can have its own models, views, templates, and static files.
- Apps can be reused across different projects, making it easier to manage and maintain your code.

30. Creating a Django App:
- To create a new app in your Django project, navigate to the project directory and run the command:

  python manage.py startapp <app_name>

- Replace `<app_name>` with the desired name for your app.
- This command will create a new directory with the specified app name, containing the necessary files and directories for a Django app.

31. App Directory Structure:
- After creating a Django app, the directory structure will look like this:

your_project/
<app_name>/
    migrations/
    __init__.py
    admin.py  
    apps.py
    models.py
    tests.py
    views.py

- The `migrations` directory contains migration files that track changes to the app's models.
- The `__init__.py` file indicates that the directory is a Python package.
- The `admin.py` file is used to register models with the Django admin interface.
- The `apps.py` file contains the configuration for the app.
- The `models.py` file defines the data models for the app.
- The `tests.py` file is used for writing tests for the app.
- The `views.py` file contains the view functions for handling requests and returning responses.

32. Registering the App in settings.py:
- To make Django aware of your new app, you need to register it in the `INSTALLED_APPS` list in your `settings.py` file.
- Open `settings.py` and add your app to the `INSTALLED_APPS` list:

INSTALLED_APPS = [
    ...
    '<app_name>',
]

- Replace `<app_name>` with the name of your app.
- This tells Django to include your app in the project and allows you to use its models, views, and templates.

IX. Django Admil Panel:

33. What is Django Admin Panel?
- Django Admin Panel is a built-in web-based interface provided by Django for managing application data.
- It allows you to perform CRUD (Create, Read, Update, Delete) operations on your models without writing any additional code.
- The admin panel is automatically generated based on the models defined in your Django app.

34. Accessing the Django Admin Panel:
- To access the Django Admin Panel, you need to create a superuser account first.
- Run the following command in your project directory:

  python manage.py createsuperuser

- Follow the prompts to enter a username, email address, and password for the superuser account.
- After creating the superuser, you can start the Django development server:

  python manage.py runserver

- Open your web browser and go to `http://127.0.0.1:8000/admin/`.
- Log in using the superuser credentials you created earlier.